openapi: "3.0.3"
info:
  title: TODO LIST
  version: 1.0.0
  description: |
    *TODO LIST* - система управления списком задач с открытым исходным кодом  
    ### Возможности системы
      - регистрация новых пользователей
      - авторизация существующих пользователей
      - управление личным списком задач
      - управление задачами в групповом доступе
      - администрирование существующих пользователей
    
    [Лицензионное соглашение](/terms)
    
    Разработчик [Андрей Богачевский](https://github.com/bogachevskes)
tags:
  - name: auth
    description: Авторизация
  - name: user
    description: Запрос информации о пользователях
  - name: admin-users
    description: Администрирование пользователей
  - name: user-boards
    description: Управление досками пользователя
  - name: board-statuses
    description: Управление статусами задач доски
  - name: board-tasks
    description: Управление задачами доски
  - name: board-users
    description: Управление пользователями доски
  - name: board-permissions
    description: Управление разрешениями доски
  - name: board-users-permissions
    description: Управление разрешениями пользователя доски
paths:
  /api/v1/auth/signin:
    post:
      tags:
        - auth
      description: Авторизация пользователя
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                formData:
                  type: object
                  properties:
                    email:
                      type: string
                      format: email
                      example: "guest@guest.com"
                    password:
                      type: string
                      example: secret
      responses:
        '201':
          description: Успешный вход
          content:
            application/json:
              example:
                token: " ... "
                userId: 1
        '400':
          description: Ошибка входа
          content:
            application/json:
              example:
                cause: "Неверный логин или пароль"
                type: "BadRequest"
                data: [ ]

  /api/v1/auth/signup:
    put:
      tags:
        - auth
      description: Регистрация нового пользователя
      operationId: signup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                formData:
                  type: object
                  properties:
                    name:
                      type: string
                      example: guest
                    email:
                      type: string
                      format: email
                      example: guest@guest.com
                    password:
                      type: string
                      example: secret
      responses:
        '200':
          description: Пользователь создан
        '400':
          description: Ошибка валидации
          content:
            application/json:
              examples:
                emailExists:
                  value:
                    cause: Почта уже существует
                    type: BadRequest
                    data: []
                otherError:
                  value:
                    cause: Не соблюдено минимальное кол-во символов поля Имя
                    type: BadRequest
                    data: []

  /api/v1/user/{user_id}/permissions:
    get:
      tags:
        - user
      description: Получить разрешения пользователя
      operationId: user_permissions
      parameters:
        - name: user_id
          in: path
          required: true
          description: Идентификатор пользователя
          schema:
            type: integer
      responses:
        '200':
          description: Успешный запрос
          content:
            application/json:
              example:
                - "/admin/users"
        '403':
          $ref: "#/components/responses/forbidden"

  /api/v1/users/match:
    get:
      tags:
        - user
      description: Найти пользователей по электронной почте или имени
      operationId: users_match
      parameters:
        - name: email
          in: query
          required: true
          description: Электронная почта для поиска
          schema:
            type: string
      responses:
        '200':
          description: Успешный запрос
          content:
            application/json:
              example:
                items:
                  - id: 2
                    email: "guest2@guest.com"
                  - id: 3
                    email: "guest3@guest.com"
                  - id: 4
                    email: "guest4@guest.com"
        '400':
          description: Ошибка запроса
          content:
            application/json:
              example:
                cause: "Не заданы параметры поиска"
                type: "BadRequest"
                data: [ ]

  /api/v1/admin/users:
    get:
      tags:
        - admin-users
      description: Получить список пользователей
      operationId: admin_users_list
      responses:
        '200':
          description: Успешный запрос
          content:
            application/json:
              example:
                - id: 1
                  name: "admin"
                  email: "admin@admin.com"
                  status: 1
                  createdAt: "2023-12-04T13:37:58.000Z"
                  updatedAt: "2023-12-04T13:37:58.000Z"
                - id: 2
                  name: "guest2"
                  email: "guest2@guest.com"
                  status: 1
                  createdAt: "2023-12-04T14:57:31.000Z"
                  updatedAt: "2023-12-04T23:33:21.000Z"
                - id: 5
                  name: "guest5"
                  email: "guest5@guest.com"
                  status: 1
                  createdAt: "2023-12-04T23:15:54.000Z"
                  updatedAt: "2023-12-05T13:59:22.000Z"
    post:
      tags:
        - admin-users
      description: Создать пользователя
      operationId: admin_user_create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                formData:
                  type: object
                  properties:
                    name:
                      type: string
                      example: guest
                    email:
                      type: string
                      example: guest@guest.com
                    password:
                      type: string
                      example: secret
      responses:
        '201':
          description: Пользователь успешно создан
        '400':
          description: Ошибка запроса
          content:
            application/json:
              example:
                cause: "Почта уже существует"
                type: "BadRequest"
                data: [ ]

  /api/v1/admin/users/{id}:
    get:
      tags:
        - admin-users
      description: Получить информацию о пользователе
      operationId: admin_user_info
      parameters:
        - name: id
          in: path
          required: true
          description: Идентификатор пользователя
          schema:
            type: integer
      responses:
        '200':
          description: Успешный запрос
          content:
            application/json:
              example:
                id: 2
                name: "guest2"
                email: "guest2@guest.com"
                status: 1
                createdAt: "2023-12-04T14:57:31.000Z"
                updatedAt: "2023-12-04T23:33:21.000Z"
        '404':
          $ref: "#/components/responses/userNotFound"
    put:
      tags:
        - admin-users
      description: Обновить информацию о пользователе
      operationId: admin_user_update
      parameters:
        - name: id
          in: path
          required: true
          description: Идентификатор пользователя
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                formData:
                  type: object
                  properties:
                    name:
                      type: string
                      example: guest
                    email:
                      type: string
                      example: guest@guest.com
                    status:
                      type: integer
                      example: 1
                    password:
                      type: string
                      example: secret
      responses:
        '200':
          description: Успешное обновление информации о пользователе
        '400':
          description: Ошибка запроса
          content:
            application/json:
              example:
                cause: "Почта уже существует"
                type: "BadRequest"
                data: [ ]
    patch:
      tags:
        - admin-users
      description: Частично обновить информацию о пользователе
      operationId: admin_user_patch
      parameters:
        - name: id
          in: path
          required: true
          description: Идентификатор пользователя
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                formData:
                  type: object
                  properties:
                    status:
                      type: integer
      responses:
        '200':
          description: Успешное частичное обновление информации о пользователе
        '404':
          $ref: "#/components/responses/userNotFound"
    delete:
      tags:
        - admin-users
      description: Удалить пользователя
      operationId: admin_user_delete
      parameters:
        - name: id
          in: path
          required: true
          description: Идентификатор пользователя
          schema:
            type: integer
      responses:
        '204':
          description: Пользователь успешно удален
        '404':
          $ref: "#/components/responses/userNotFound"

  /api/v1/user/{user_id}/boards:
    get:
      tags:
        - user-boards
      description: Получить доски пользователя
      operationId: user_boards_list
      parameters:
        - name: user_id
          in: path
          required: true
          description: Идентификатор пользователя
          schema:
            type: integer
      responses:
        '200':
          description: Успешный запрос
          content:
            application/json:
              example:
                - id: 11
                  name: "Доска проекта ID:12345"
                  description: "Доска учета задач проекта автоматизации производства"
                  createdAt: "2023-12-04T13:46:15.000Z"
                  updatedAt: "2023-12-04T13:46:15.000Z"
                  owner:
                    id: 1
                    name: guest
                    email: guest@guest.com
                - id: 15
                  name: "Доска проекта ID:678890"
                  description: "Доска учета задач проекта автоматизации документооборота"
                  createdAt: "2023-12-04T19:44:21.000Z"
                  updatedAt: "2023-12-04T19:44:21.000Z"
                  owner:
                    id: 1
                    name: guest
                    email: guest@guest.com
        '403':
          $ref: "#/components/responses/forbidden"
    post:
      tags:
        - user-boards
      description: Создать новую доску для пользователя
      operationId: user_board_create
      parameters:
        - name: user_id
          in: path
          required: true
          description: Идентификатор пользователя
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                formData:
                  type: object
                  properties:
                    name:
                      type: string
                      example: "Проект ISD:124467"
                    description:
                      type: string
                      example: "Задачи проекта ISD:124467 запроса ISBN:456568"
      responses:
        '201':
          description: Доска успешно создана
        '400':
          $ref: "#/components/responses/badRequest"

  /api/v1/user/{user_id}/boards/{id}:
    get:
      tags:
        - user-boards
      description: Получить информацию о доске пользователя
      operationId: user_board_item
      parameters:
        - name: user_id
          in: path
          required: true
          description: Идентификатор пользователя
          schema:
            type: integer
        - name: id
          in: path
          required: true
          description: Идентификатор доски
          schema:
            type: integer
      responses:
        '200':
          description: Успешный запрос
          content:
            application/json:
              example:
                id: 11
                name: "Доска проекта ID:12345"
                description: "Доска учета задач проекта автоматизации производства"
                createdAt: "2023-12-04T13:46:15.000Z"
                updatedAt: "2023-12-04T13:46:15.000Z"
                owner:
                  id: 1
                  name: guest
                  email: guest@guest.com
        '404':
          $ref: "#/components/responses/boardNotFound"
    put:
      tags:
        - user-boards
      description: Редактировать доску пользователя
      operationId: user_board_update
      parameters:
        - name: user_id
          in: path
          required: true
          description: Идентификатор пользователя
          schema:
            type: integer
        - name: id
          in: path
          required: true
          description: Идентификатор доски
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                formData:
                  type: object
                  properties:
                    name:
                      type: string
                      example: "Проект ISD:124467"
                    description:
                      type: string
                      example: "Задачи проекта ISD:124467 запроса ISBN:456568"
      responses:
        '200':
          description: Доска успешно изменена
        '400':
          $ref: "#/components/responses/badRequest"
    patch:
      tags:
        - user-boards
      description: Изменить название доски пользователя
      operationId: user_board_part_update
      parameters:
        - name: user_id
          in: path
          required: true
          description: Идентификатор пользователя
          schema:
            type: integer
        - name: id
          in: path
          required: true
          description: Идентификатор доски
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                formData:
                  type: object
                  properties:
                    name:
                      type: string
                      example: Новое имя задачи
      responses:
        '200':
          description: Доска успешно изменена
        '404':
          $ref: "#/components/responses/boardNotFound"

    delete:
      tags:
        - user-boards
      description: Удалить доску пользователя
      operationId: user_board_delete
      parameters:
        - name: user_id
          in: path
          required: true
          description: Идентификатор пользователя
          schema:
            type: integer
        - name: id
          in: path
          required: true
          description: Идентификатор доски
          schema:
            type: integer
      responses:
        '204':
          description: Доска успешно удалена
        '404':
          $ref: "#/components/responses/boardNotFound"

  /api/v1/boards/{board_id}/statuses:
    get:
      tags:
        - board-statuses
      description: Получить статусы задач доски
      operationId: board_statuses
      parameters:
        - $ref: "#/components/parameters/boardIdPathParam"
      responses:
        '200':
          description: Успешный запрос
          content:
            application/json:
              example:
                - id: 13
                  boardId: 11
                  name: "Новое"
                  createdAt: "2023-12-05T13:57:21.000Z"
                - id: 14
                  boardId: 11
                  name: "В работе"
                  createdAt: "2023-12-05T13:57:40.000Z"
        '403':
          description: Доступ к группе запрещен
          content:
            application/json:
              example:
                cause: "Доступ к группе запрещен"
                type: "Forbidden"
                data: []
    post:
      tags:
        - board-statuses
      description: Создать новый статус задач для доски
      operationId: board_statuses_create
      parameters:
        - $ref: "#/components/parameters/boardIdPathParam"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                formData:
                  type: object
                  properties:
                    name:
                      type: string
                      example: На ревью
      responses:
        '201':
          description: Статус успешно создан
        '400':
          $ref: "#/components/responses/badRequest"

  /api/v1/boards/{board_id}/statuses/{id}:
    put:
      tags:
        - board-statuses
      description: Обновить статус задач доски
      operationId: board_status_update
      parameters:
        - $ref: "#/components/parameters/boardIdPathParam"
        - name: id
          in: path
          required: true
          description: Идентификатор статуса
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                formData:
                  type: object
                  properties:
                    name:
                      type: string
                      example: На ревью
      responses:
        '200':
          description: Статус успешно обновлен
        '400':
          $ref: "#/components/responses/badRequest"

    delete:
      tags:
        - board-statuses
      description: Удалить статус задач доски
      operationId: board_status_delete
      parameters:
        - $ref: "#/components/parameters/boardIdPathParam"
        - name: id
          in: path
          required: true
          description: Идентификатор статуса
          schema:
            type: integer
      responses:
        '204':
          description: Статус успешно удален
        '404':
          description: Статус задания не найден
          content:
            application/json:
              example:
                cause: "Статус задания не найден"
                type: "NotFound"
                data: [ ]

  /api/v1/boards/{board_id}/tasks:
    get:
      tags:
        - board-tasks
      description: Получить задачи доски
      operationId: board_tasks
      parameters:
        - $ref: "#/components/parameters/boardIdPathParam"
      responses:
        '200':
          description: Успешный запрос
          content:
            application/json:
              example:
                - status:
                    id: 14
                    boardId: 11
                    name: "В работе"
                    createdAt: "2023-12-05T13:57:40.000Z"
                  tasks:
                    - id: 19
                      statusId: 14
                      boardId: 11
                      name: "Реализовать авторизацию"
                      description: "Реализовать сервис авторизации в соответствии с корп. требованиями"
                      plannedCompletionAt: "2023-12-12T00:00:00.000Z"
                      createdAt: "2023-12-05T18:51:16.000Z"
        '404':
          $ref: "#/components/responses/boardNotFound"
    post:
      tags:
        - board-tasks
      description: Создать новую задачу для доски
      operationId: board_task_create
      parameters:
        - $ref: "#/components/parameters/boardIdPathParam"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                formData:
                  type: object
                  properties:
                    statusId:
                      type: integer
                      example: 1
                    name:
                      type: string
                      example: "Реализовать авторизацию"
                    description:
                      type: string
                      example: "Реализовать сервис авторизации в соответствии с корп. требованиями"
                    plannedCompletionAt:
                      type: string
                      format: date-time
                      example: "2023-12-12T00:00:00.000Z"
      responses:
        '201':
          description: Задача успешно создана
        '400':
          $ref: "#/components/responses/badRequest"

  /api/v1/boards/{board_id}/tasks/{id}:
    put:
      tags:
        - board-tasks
      description: Обновить задачу на доске
      operationId: board_task_update
      parameters:
        - $ref: "#/components/parameters/boardIdPathParam"
        - name: id
          in: path
          required: true
          description: Идентификатор задачи
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                formData:
                  type: object
                  properties:
                    statusId:
                      type: integer
                      example: 1
                    name:
                      type: string
                      example: "Реализовать авторизацию"
                    description:
                      type: string
                      example: "Реализовать сервис авторизации в соответствии с корп. требованиями"
                    plannedCompletionAt:
                      type: string
                      format: date-time
                      example: "2023-12-12T00:00:00.000Z"
      responses:
        '200':
          description: Задача успешно обновлена
        '400':
          $ref: "#/components/responses/badRequest"
        '404':
          $ref: "#/components/responses/taskNotFound"
    patch:
      tags:
        - board-tasks
      description: Частичное обновление задачи на доске
      operationId: board_task_part_update
      parameters:
        - $ref: "#/components/parameters/boardIdPathParam"
        - name: id
          in: path
          required: true
          description: Идентификатор задачи
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                formData:
                  type: object
                  properties:
                    statusId:
                      type: integer
      responses:
        '200':
          description: Задача успешно обновлена
        '400':
          $ref: "#/components/responses/badRequest"
        '404':
          $ref: "#/components/responses/taskNotFound"
    delete:
      tags:
        - board-tasks
      description: Удалить задачу с доски
      operationId: board_task_delete
      parameters:
        - $ref: "#/components/parameters/boardIdPathParam"
        - name: id
          in: path
          required: true
          description: Идентификатор задачи
          schema:
            type: integer
      responses:
        '204':
          description: Задача успешно удалена
        '404':
          $ref: "#/components/responses/taskNotFound"

  /api/v1/boards/{board_id}/users:
    get:
      tags:
        - board-users
      description: Получить пользователей доски
      operationId: user_boards
      parameters:
        - $ref: "#/components/parameters/boardIdPathParam"
      responses:
        '200':
          description: Успешный запрос
          content:
            application/json:
              example:
                - id: 1
                  name: "admin"
                  email: "admin@admin.com"
                - id: 5
                  name: "guest5"
                  email: "guest5@guest.com"
        '403':
          $ref: "#/components/responses/forbiddenBoardAccess"
    post:
      tags:
        - board-users
      description: Добавить пользователей к доске
      operationId: user_boards_create
      parameters:
        - $ref: "#/components/parameters/boardIdPathParam"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                formData:
                  type: object
                  properties:
                    ids:
                      type: array
                      items:
                        type: integer
                      example:
                        - 1
                        - 2
                        - 3
      responses:
        '201':
          description: Пользователи успешно добавлены к доске
          content:
            application/json:
              example:
                users:
                  not_exist:
                    - 3
        '403':
          $ref: "#/components/responses/forbiddenBoardAccess"

  /api/v1/boards/{board_id}/users/{id}:
    delete:
      tags:
        - board-users
      description: Удалить пользователя из доски
      operationId: user_boards_delete
      parameters:
        - $ref: "#/components/parameters/boardIdPathParam"
        - name: id
          in: path
          required: true
          description: Идентификатор пользователя
          schema:
            type: integer
      responses:
        '204':
          description: Пользователь успешно удален из доски
        '403':
          $ref: "#/components/responses/forbiddenBoardAccess"

  /api/v1/boards/{board_id}/permissions:
    get:
      tags:
        - board-permissions
      description: Получить разрешения доски
      parameters:
        - $ref: "#/components/parameters/boardIdPathParam"
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              example:
                - delete-board
                - delete-board-statuses
                - manage-board
                - manage-board-statuses
                - manage-board-users
        '403':
          description: Forbidden
          content:
            application/json:
              example:
                cause: Доступ к доске запрещен
                type: Forbidden
                data: [ ]

  /api/v1/boards/{board_id}/users/{user_id}/permissions:
    get:
      tags:
        - board-users-permissions
      description: Получение разрешений пользователя доски
      parameters:
        - $ref: "#/components/parameters/boardIdPathParam"
        - name: user_id
          in: path
          required: true
          description: Идентификатор пользователя
          schema:
            type: integer
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              example:
                - delete-board-statuses
                - manage-board-statuses
                - manage-board-users
        '403':
          description: Запрещено
          content:
            application/json:
              example:
                cause: Доступ к доске запрещен
                type: Forbidden
                data: []
  /api/v1/boards/{board_id}/users/{user_id}/permissions/{permission}:
    put:
      tags:
        - board-users-permissions
      description: Назначение разрешения пользователю доски
      parameters:
        - $ref: "#/components/parameters/boardIdPathParam"
        - name: user_id
          in: path
          required: true
          description: Идентификатор пользователя
          schema:
            type: integer
        - name: permission
          in: path
          required: true
          description: Название разрешения
          schema:
            type: string
      responses:
        '200':
          description: Разрешение назначено
        '400':
          description: Неверный запрос
          content:
            application/json:
              example:
                cause: Невозможно назначить дополнительное разрешение владельцу доски
                type: BadRequest
                data: [ ]
    delete:
      tags:
        - board-users-permissions
      description: Удаление разрешения у пользователя доски
      parameters:
        - $ref: "#/components/parameters/boardIdPathParam"
        - name: user_id
          in: path
          required: true
          description: Идентификатор пользователя
          schema:
            type: integer
        - name: permission
          in: path
          required: true
          description: Название разрешения
          schema:
            type: string
      responses:
        '204':
          description: Успешное удаление
        '400':
          description: Неверный запрос
          content:
            application/json:
              example:
                cause: Невозможно удалить дополнительное разрешение у владельца доски
                type: BadRequest
                data: [ ]

components:
  parameters:
    boardIdPathParam:
      name: board_id
      in: path
      required: true
      description: Идентификатор доски
      schema:
        type: integer
  responses:
    forbidden:
      description: Доступ запрещен
      content:
        application/json:
          example:
            cause: "Доступ запрещен"
            type: "Forbidden"
            data: []
    badRequest:
      description: Ошибка запроса
      content:
        application/json:
          example:
            cause: "Не соблюдено минимальное кол-во символов поля Имя"
            type: "BadRequest"
            data: [ ]
    forbiddenBoardAccess:
      description: Доступ к доске запрещен
      content:
        application/json:
          example:
            cause: "Доступ к доске запрещен"
            type: "Forbidden"
            data: [ ]
    boardNotFound:
      description: Доска не найдена
      content:
        application/json:
          example:
            cause: "Доска не найдена"
            type: "NotFound"
            data: [ ]
    taskNotFound:
      description: Задача не найдена
      content:
        application/json:
          example:
            cause: "Задача не найдена"
            type: "NotFound"
            data: [ ]
    userNotFound:
      description: Пользователь не найден
      content:
        application/json:
          example:
            cause: "Пользователь не найден"
            type: "NotFound"
            data: [ ]